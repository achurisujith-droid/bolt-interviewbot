import { Certificate, InterviewSession } from '../types/interview';

export const generateCertificateNumber = (): string => {
  const prefix = 'AI-CERT';
  const timestamp = Date.now().toString().slice(-8);
  const random = Math.random().toString(36).substring(2, 6).toUpperCase();
  return `${prefix}-${timestamp}-${random}`;
};

export const downloadCertificate = async (certificate: Certificate, session?: InterviewSession): Promise<void> => {
  console.log('🎯 Starting certificate generation...');
  console.log('📜 Certificate:', certificate);
  console.log('📊 Session:', session);
  
  try {
    // Create canvas for certificate
    const canvas = document.createElement('canvas');
    const ctx = canvas.getContext('2d');
    
    if (!ctx) {
      throw new Error('Canvas context not available');
    }
    
    // Set canvas size (A4 proportions)
    canvas.width = 1200;
    canvas.height = 850;
    
    // Create gradient background
    const gradient = ctx.createLinearGradient(0, 0, canvas.width, canvas.height);
    gradient.addColorStop(0, '#667eea');
    gradient.addColorStop(1, '#764ba2');
    ctx.fillStyle = gradient;
    ctx.fillRect(0, 0, canvas.width, canvas.height);
    
    // Add decorative border
    ctx.strokeStyle = '#ffffff';
    ctx.lineWidth = 8;
    ctx.strokeRect(40, 40, canvas.width - 80, canvas.height - 80);
    
    // Inner border
    ctx.strokeStyle = '#f0f0f0';
    ctx.lineWidth = 2;
    ctx.strokeRect(60, 60, canvas.width - 120, canvas.height - 120);
    
    // Certificate title
    ctx.fillStyle = '#ffffff';
    ctx.font = 'bold 48px Arial, sans-serif';
    ctx.textAlign = 'center';
    ctx.fillText('CERTIFICATE OF COMPLETION', canvas.width / 2, 150);
    
    // Subtitle
    ctx.font = '24px Arial, sans-serif';
    ctx.fillStyle = '#f0f0f0';
    ctx.fillText('AI-Powered Interview Assessment', canvas.width / 2, 190);
    
    // Candidate name
    ctx.font = 'bold 36px Arial, sans-serif';
    ctx.fillStyle = '#ffffff';
    ctx.fillText(certificate.candidateName, canvas.width / 2, 280);
    
    // Achievement text
    ctx.font = '20px Arial, sans-serif';
    ctx.fillStyle = '#e0e0e0';
    ctx.fillText('has successfully completed the', canvas.width / 2, 320);
    
    // Position
    ctx.font = 'bold 32px Arial, sans-serif';
    ctx.fillStyle = '#ffffff';
    ctx.fillText(certificate.position, canvas.width / 2, 370);
    
    // Interview assessment text
    ctx.font = '20px Arial, sans-serif';
    ctx.fillStyle = '#e0e0e0';
    ctx.fillText('Interview Assessment', canvas.width / 2, 410);
    
    // Score section
    ctx.font = 'bold 28px Arial, sans-serif';
    ctx.fillStyle = '#ffffff';
    ctx.fillText(`Final Score: ${certificate.score}%`, canvas.width / 2, 480);
    
    // Performance level
    const performanceLevel = certificate.score >= 80 ? 'EXCELLENT' : 
                            certificate.score >= 60 ? 'GOOD' : 'DEVELOPING';
    const performanceColor = certificate.score >= 80 ? '#4ade80' : 
                            certificate.score >= 60 ? '#fbbf24' : '#f87171';
    
    ctx.fillStyle = performanceColor;
    ctx.font = 'bold 24px Arial, sans-serif';
    ctx.fillText(`Performance: ${performanceLevel}`, canvas.width / 2, 520);
    
    // Certificate details
    ctx.fillStyle = '#d0d0d0';
    ctx.font = '16px Arial, sans-serif';
    ctx.fillText(`Certificate Number: ${certificate.certificateNumber}`, canvas.width / 2, 580);
    ctx.fillText(`Issue Date: ${certificate.issueDate.toLocaleDateString()}`, canvas.width / 2, 610);
    
    // Evaluation method
    if (certificate.evaluationMethod) {
      ctx.fillText(`Evaluation Method: ${certificate.evaluationMethod}`, canvas.width / 2, 640);
    }
    
    // Add AI logo/badge
    ctx.fillStyle = '#ffffff';
    ctx.font = 'bold 20px Arial, sans-serif';
    ctx.fillText('🤖 AI-POWERED EVALUATION', canvas.width / 2, 700);
    
    // Add verification info
    ctx.font = '14px Arial, sans-serif';
    ctx.fillStyle = '#c0c0c0';
    ctx.fillText('This certificate can be verified using the certificate number above', canvas.width / 2, 750);
    ctx.fillText('Generated by AI Interview Bot System', canvas.width / 2, 770);
    
    console.log('🎨 Certificate canvas created successfully');
    
    // Convert to blob and download
    canvas.toBlob(async (blob) => {
      if (!blob) {
        throw new Error('Failed to create certificate image');
      }
      
      console.log('📦 Certificate blob created, size:', blob.size);
      
      // Create filename
      const filename = `AI-Interview-Certificate-${certificate.candidateName.replace(/\s+/g, '-')}-${certificate.certificateNumber}.png`;
      console.log('📁 Filename:', filename);
      
      // Download the image
      const url = URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      link.download = filename;
      link.style.display = 'none';
      
      document.body.appendChild(link);
      console.log('🔗 Download link created and added to DOM');
      
      // Trigger download
      link.click();
      console.log('🖱️ Download triggered');
      
      // Cleanup
      setTimeout(() => {
        document.body.removeChild(link);
        URL.revokeObjectURL(url);
        console.log('🧹 Cleanup completed');
      }, 1000);
      
      console.log('✅ Certificate download completed successfully');
      
    }, 'image/png', 1.0);
    
  } catch (error) {
    console.error('❌ Certificate generation failed:', error);
    
    // Fallback: Generate detailed text report
    console.log('🔄 Falling back to text report...');
    const reportContent = generateDetailedTextReport(certificate, session);
    
    const blob = new Blob([reportContent], { type: 'text/plain;charset=utf-8' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `AI-Interview-Report-${certificate.candidateName.replace(/\s+/g, '-')}.txt`;
    
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
    
    console.log('✅ Text report downloaded as fallback');
  }
};

const generateDetailedTextReport = (certificate: Certificate, session?: InterviewSession): string => {
  const reportDate = new Date().toLocaleDateString();
  const reportTime = new Date().toLocaleTimeString();
  
  let report = `
╔══════════════════════════════════════════════════════════════════════════════╗
║                        AI INTERVIEW EVALUATION REPORT                        ║
╚══════════════════════════════════════════════════════════════════════════════╝

CANDIDATE INFORMATION
━━━━━━━━━━━━━━━━━━━━━
Name: ${certificate.candidateName}
Position: ${certificate.position}
Overall Score: ${certificate.score}%
Performance Level: ${certificate.score >= 80 ? 'EXCELLENT' : certificate.score >= 60 ? 'GOOD' : 'NEEDS IMPROVEMENT'}

CERTIFICATE DETAILS
━━━━━━━━━━━━━━━━━━━━
Certificate Number: ${certificate.certificateNumber}
Issue Date: ${certificate.issueDate.toLocaleDateString()}
Evaluation Method: ${certificate.evaluationMethod || 'GPT-4o AI Evaluation'}
Report Generated: ${reportDate} at ${reportTime}

EVALUATION METHODOLOGY
━━━━━━━━━━━━━━━━━━━━━━
This assessment was conducted using advanced AI technology:

1. SPEECH-TO-TEXT PROCESSING
   • OpenAI Whisper API for accurate transcription
   • Real-time audio analysis and conversion

2. INTELLIGENT EVALUATION  
   • GPT-4o language model for content analysis
   • Multi-criteria assessment framework
   • Context-aware scoring based on position requirements

3. SCORING CRITERIA (Each worth 25%)
   • Relevance & Content Quality
   • Communication Skills
   • Technical/Professional Knowledge  
   • Examples & Evidence

`;

  if (session?.resumeAnalysis) {
    report += `
RESUME ANALYSIS CONTEXT
━━━━━━━━━━━━━━━━━━━━━━━
Actual Role: ${session.resumeAnalysis.actualRole || 'Not specified'}
Experience Level: ${session.resumeAnalysis.yearsOfExperience} years (${session.resumeAnalysis.seniority} level)
Key Technologies: ${session.resumeAnalysis.keyTechnologies?.join(', ') || 'Not specified'}
Personalized Questions: YES - Questions tailored to candidate's background

`;
  }

  if (session?.responses && session.responses.length > 0) {
    report += `
DETAILED QUESTION-BY-QUESTION ANALYSIS
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

`;

    session.responses.forEach((response, index) => {
      report += `
QUESTION ${index + 1}
${'-'.repeat(50)}
Q: ${response.question}

CANDIDATE RESPONSE TRANSCRIPT:
"${response.transcript || 'No transcript available'}"

EVALUATION RESULTS:
• Score: ${response.score || 'N/A'}%
• AI Feedback: ${response.feedback || 'No feedback available'}

`;

      if (response.strengths && response.strengths.length > 0) {
        report += `STRENGTHS IDENTIFIED:
${response.strengths.map(s => `• ${s}`).join('\n')}

`;
      }

      if (response.improvements && response.improvements.length > 0) {
        report += `AREAS FOR IMPROVEMENT:
${response.improvements.map(i => `• ${i}`).join('\n')}

`;
      }
    });
  }

  report += `
OVERALL ASSESSMENT SUMMARY
━━━━━━━━━━━━━━━━━━━━━━━━━━━
Final Score: ${certificate.score}%
Performance Rating: ${certificate.score >= 80 ? 'EXCELLENT - Exceeds expectations' : 
                     certificate.score >= 60 ? 'GOOD - Meets requirements' : 
                     'DEVELOPING - Additional preparation recommended'}

SCORE INTERPRETATION:
• 80-100%: Excellent performance, ready for advanced roles
• 60-79%:  Good performance, suitable for target position  
• 40-59%:  Developing skills, additional training recommended
• 0-39%:   Significant improvement needed

CERTIFICATE VERIFICATION
━━━━━━━━━━━━━━━━━━━━━━━━━
This certificate can be verified using:
• Certificate Number: ${certificate.certificateNumber}
• Issue Date: ${certificate.issueDate.toLocaleDateString()}
• Candidate Name: ${certificate.candidateName}
• Position Assessed: ${certificate.position}

TECHNOLOGY STACK
━━━━━━━━━━━━━━━━━━
• AI Evaluation: OpenAI GPT-4o
• Speech Processing: OpenAI Whisper
• Text-to-Speech: OpenAI TTS
• Platform: AI Interview Bot System

This report was generated automatically by the AI Interview Bot system.
For questions about this assessment, please contact the system administrator.

Report ID: ${certificate.id}
Generated: ${reportDate} ${reportTime}

═══════════════════════════════════════════════════════════════════════════════
                              END OF REPORT
═══════════════════════════════════════════════════════════════════════════════
`;

  return report;
};